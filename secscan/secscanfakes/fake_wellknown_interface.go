// Code generated by counterfeiter. DO NOT EDIT.
package secscanfakes

import (
	"sync"

	"github.com/quay/container-security-operator/secscan"
)

type FakeWellknownInterface struct {
	ImageSecurityTemplateStub        func() (string, error)
	imageSecurityTemplateMutex       sync.RWMutex
	imageSecurityTemplateArgsForCall []struct {
	}
	imageSecurityTemplateReturns struct {
		result1 string
		result2 error
	}
	imageSecurityTemplateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ManifestSecurityTemplateStub        func() (string, error)
	manifestSecurityTemplateMutex       sync.RWMutex
	manifestSecurityTemplateArgsForCall []struct {
	}
	manifestSecurityTemplateReturns struct {
		result1 string
		result2 error
	}
	manifestSecurityTemplateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ViewImageTemplateStub        func() (string, error)
	viewImageTemplateMutex       sync.RWMutex
	viewImageTemplateArgsForCall []struct {
	}
	viewImageTemplateReturns struct {
		result1 string
		result2 error
	}
	viewImageTemplateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWellknownInterface) ImageSecurityTemplate() (string, error) {
	fake.imageSecurityTemplateMutex.Lock()
	ret, specificReturn := fake.imageSecurityTemplateReturnsOnCall[len(fake.imageSecurityTemplateArgsForCall)]
	fake.imageSecurityTemplateArgsForCall = append(fake.imageSecurityTemplateArgsForCall, struct {
	}{})
	fake.recordInvocation("ImageSecurityTemplate", []interface{}{})
	fake.imageSecurityTemplateMutex.Unlock()
	if fake.ImageSecurityTemplateStub != nil {
		return fake.ImageSecurityTemplateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.imageSecurityTemplateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWellknownInterface) ImageSecurityTemplateCallCount() int {
	fake.imageSecurityTemplateMutex.RLock()
	defer fake.imageSecurityTemplateMutex.RUnlock()
	return len(fake.imageSecurityTemplateArgsForCall)
}

func (fake *FakeWellknownInterface) ImageSecurityTemplateCalls(stub func() (string, error)) {
	fake.imageSecurityTemplateMutex.Lock()
	defer fake.imageSecurityTemplateMutex.Unlock()
	fake.ImageSecurityTemplateStub = stub
}

func (fake *FakeWellknownInterface) ImageSecurityTemplateReturns(result1 string, result2 error) {
	fake.imageSecurityTemplateMutex.Lock()
	defer fake.imageSecurityTemplateMutex.Unlock()
	fake.ImageSecurityTemplateStub = nil
	fake.imageSecurityTemplateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWellknownInterface) ImageSecurityTemplateReturnsOnCall(i int, result1 string, result2 error) {
	fake.imageSecurityTemplateMutex.Lock()
	defer fake.imageSecurityTemplateMutex.Unlock()
	fake.ImageSecurityTemplateStub = nil
	if fake.imageSecurityTemplateReturnsOnCall == nil {
		fake.imageSecurityTemplateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.imageSecurityTemplateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWellknownInterface) ManifestSecurityTemplate() (string, error) {
	fake.manifestSecurityTemplateMutex.Lock()
	ret, specificReturn := fake.manifestSecurityTemplateReturnsOnCall[len(fake.manifestSecurityTemplateArgsForCall)]
	fake.manifestSecurityTemplateArgsForCall = append(fake.manifestSecurityTemplateArgsForCall, struct {
	}{})
	fake.recordInvocation("ManifestSecurityTemplate", []interface{}{})
	fake.manifestSecurityTemplateMutex.Unlock()
	if fake.ManifestSecurityTemplateStub != nil {
		return fake.ManifestSecurityTemplateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.manifestSecurityTemplateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWellknownInterface) ManifestSecurityTemplateCallCount() int {
	fake.manifestSecurityTemplateMutex.RLock()
	defer fake.manifestSecurityTemplateMutex.RUnlock()
	return len(fake.manifestSecurityTemplateArgsForCall)
}

func (fake *FakeWellknownInterface) ManifestSecurityTemplateCalls(stub func() (string, error)) {
	fake.manifestSecurityTemplateMutex.Lock()
	defer fake.manifestSecurityTemplateMutex.Unlock()
	fake.ManifestSecurityTemplateStub = stub
}

func (fake *FakeWellknownInterface) ManifestSecurityTemplateReturns(result1 string, result2 error) {
	fake.manifestSecurityTemplateMutex.Lock()
	defer fake.manifestSecurityTemplateMutex.Unlock()
	fake.ManifestSecurityTemplateStub = nil
	fake.manifestSecurityTemplateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWellknownInterface) ManifestSecurityTemplateReturnsOnCall(i int, result1 string, result2 error) {
	fake.manifestSecurityTemplateMutex.Lock()
	defer fake.manifestSecurityTemplateMutex.Unlock()
	fake.ManifestSecurityTemplateStub = nil
	if fake.manifestSecurityTemplateReturnsOnCall == nil {
		fake.manifestSecurityTemplateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.manifestSecurityTemplateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWellknownInterface) ViewImageTemplate() (string, error) {
	fake.viewImageTemplateMutex.Lock()
	ret, specificReturn := fake.viewImageTemplateReturnsOnCall[len(fake.viewImageTemplateArgsForCall)]
	fake.viewImageTemplateArgsForCall = append(fake.viewImageTemplateArgsForCall, struct {
	}{})
	fake.recordInvocation("ViewImageTemplate", []interface{}{})
	fake.viewImageTemplateMutex.Unlock()
	if fake.ViewImageTemplateStub != nil {
		return fake.ViewImageTemplateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.viewImageTemplateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWellknownInterface) ViewImageTemplateCallCount() int {
	fake.viewImageTemplateMutex.RLock()
	defer fake.viewImageTemplateMutex.RUnlock()
	return len(fake.viewImageTemplateArgsForCall)
}

func (fake *FakeWellknownInterface) ViewImageTemplateCalls(stub func() (string, error)) {
	fake.viewImageTemplateMutex.Lock()
	defer fake.viewImageTemplateMutex.Unlock()
	fake.ViewImageTemplateStub = stub
}

func (fake *FakeWellknownInterface) ViewImageTemplateReturns(result1 string, result2 error) {
	fake.viewImageTemplateMutex.Lock()
	defer fake.viewImageTemplateMutex.Unlock()
	fake.ViewImageTemplateStub = nil
	fake.viewImageTemplateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWellknownInterface) ViewImageTemplateReturnsOnCall(i int, result1 string, result2 error) {
	fake.viewImageTemplateMutex.Lock()
	defer fake.viewImageTemplateMutex.Unlock()
	fake.ViewImageTemplateStub = nil
	if fake.viewImageTemplateReturnsOnCall == nil {
		fake.viewImageTemplateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.viewImageTemplateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWellknownInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imageSecurityTemplateMutex.RLock()
	defer fake.imageSecurityTemplateMutex.RUnlock()
	fake.manifestSecurityTemplateMutex.RLock()
	defer fake.manifestSecurityTemplateMutex.RUnlock()
	fake.viewImageTemplateMutex.RLock()
	defer fake.viewImageTemplateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWellknownInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ secscan.WellknownInterface = new(FakeWellknownInterface)
